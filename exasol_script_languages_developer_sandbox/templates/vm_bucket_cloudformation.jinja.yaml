Resources:
  {{bucket_name}}:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: 'Private'
    Description: 'Bucket to store script-language developer sandbox VM images'
    DeletionPolicy: Retain
    UpdateReplacePolicy : Retain
  {{role_name}}:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - vmie.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: "IAM Role to run VM image exports on the S3-Bucket"
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketAcl
                Resource:
                  - !Sub "arn:aws:s3:::${ {{bucket_name}} }/*"
                  - !Sub "arn:aws:s3:::${ {{bucket_name}} }"
              - Effect: Allow
                Action:
                  - ec2:ModifySnapshotAttribute
                  - ec2:CopySnapshot
                  - ec2:RegisterImage
                  - ec2:Describe*
                Resource:
                  - "*"
  S3CDNBucketPolicy:
    Metadata:
      Comment: 'Bucket policy to allow cloudfront to access the images'
    Properties:
      Bucket: !Ref {{bucket_name}}
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub "arn:aws:s3:::${ {{bucket_name}} }/slc_developer_sandbox/*"
    Type: 'AWS::S3::BucketPolicy'

  CfDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'A simple distribution with an S3 origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: 'none'
            Headers:
              - 'Origin'
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub 's3-origin-${ {{bucket_name}} }'
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http1.1'
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt {{bucket_name}}.DomainName
            Id: !Sub 's3-origin-${ {{bucket_name}} }'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CfOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'

  CfOriginAccessIdentity:
    Metadata:
      Comment: 'Access S3 bucket content only through CloudFront'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Access S3 bucket content only through CloudFront'
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'

Outputs:
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - {{bucket_name}}
          - DomainName
    Description: Name of S3 bucket
  CfDistributionId:
    Description: 'Id for our cloudfront distribution'
    Value: !Ref CfDistribution
  CfDistributionDomainName:
    Description: 'Domain name for our cloudfront distribution'
    Value: !GetAtt CfDistribution.DomainName